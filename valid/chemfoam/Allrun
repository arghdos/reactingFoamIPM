#!/bin/sh
cd ${0%/*} || exit 1    # Run from this directory

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Set application name
application=$(getApplication)

runApplication chemkinToFoam \
               chemkin/chem.inp chemkin/therm.dat chemkin/transportProperties \
               constant/reactions constant/thermo

# convert mechanism to ct format
runApplication python -m cantera.ck2cti --input chemkin/chem.inp \
    --thermo chemkin/therm.dat --output chemkin/chem.cti

to_accelerint() {
    # set the chemistry dict to use accelerint
    foamDictionary -entry chemistryType.solver -set batched constant/chemistryProperties
    foamDictionary -entry chemistryType.method -set batchedIPM constant/chemistryProperties
    foamDictionary -entry odeCoeffs.solver -set AccelerInt constant/chemistryProperties
    foamDictionary -entry odeCoeffs.accSolver -set ROS4 constant/chemistryProperties
    foamDictionary -entry odeCoeffs.platform -set intel constant/chemistryProperties
    foamDictionary -entry odeCoeffs.deviceType -set CPU constant/chemistryProperties
    foamDictionary -entry odeCoeffs.vectorSize -set 8 constant/chemistryProperties
    foamDictionary -entry odeCoeffs.absTol -set 1e-10 constant/chemistryProperties
    foamDictionary -entry odeCoeffs.relTol -set 1e-06 constant/chemistryProperties
}

to_foam() {
    # set the chemistry dict to use OpenFOAM
    foamDictionary -entry chemistryType.solver -set ode constant/chemistryProperties
    foamDictionary -entry chemistryType.method -set standard constant/chemistryProperties
    foamDictionary -entry odeCoeffs.solver -set Rosenbrock34 constant/chemistryProperties
    foamDictionary -entry odeCoeffs.absTol -set 1e-10 constant/chemistryProperties
    foamDictionary -entry odeCoeffs.relTol -set 1e-06 constant/chemistryProperties
}

to_testode() {
    foamDictionary -entry application -set testODE system/controlDict
}

to_chemfoam() {
    foamDictionary -entry application -set chemFoamIPM system/controlDict
}

# equivalence ratios
phivals=(0.5 1.0 1.5)
# pressures = 1, 10 and 25 atm
pressvals=(101325 1013250 2533125)
# initial temperatures
tempvals=(850 1100 1500)

endtime() {
    local skip=$(grep -Po "Skipping: T=$1, P=$2, phi=$3, time=\K[^ ]+" runtimes)
    if [ ! -z $skip ];
    then
        echo ""
    else
        local time=$(grep -Po "T=$1, P=$2, phi=$3, time=\K[^ ]+" runtimes)
        echo "$time"
    fi
}

min () {
    echo $1 $2 | awk '{if ($1 > $2) {print $2} else {print $1}}';
}


trap "echo failure; exit 1" ERR

for pressure in "${pressvals[@]}";
do
    for temperature in "${tempvals[@]}";
    do
        for phi in "${phivals[@]}";
        do
            if [ "$temperature" = "900" ] && [ "$pressure" = "101325" ];
            then
                # skip case
                continue
            fi

            to_chemfoam

            et=$(endtime "$temperature" "$pressure" "$phi")
            if [ -z $et ];
            then
                echo "Skipping case T=$temperature, P=$pressure, " \
                     "equivalence ratio=$phi, due to long ignition delay."
                # skip this case
                continue
            fi


            echo "Running case T=$temperature, P=$pressure, equivalence ratio=$phi"
            echo "Endtime=$et"
            # test to see if we've already run this case
            good_pressure=$(echo "scale=0 ; $pressure / 101325" | bc)
            test="${good_pressure}_${temperature}_${phi}".npz
            if [ -f "$test" ];
            then
                continue
            fi

            # set state
            foamDictionary -entry p -set $pressure constant/initialConditions
            foamDictionary -entry T -set $temperature constant/initialConditions
            foamDictionary -entry fractions.CH4 -set $phi constant/initialConditions
            foamDictionary -entry endTime -set $et system/controlDict

            # limit initial and maximum timestep based on endtime
            initial=$(echo "$et 100000.0" | awk '{printf "%.16f", $1 / $2}')
            maxv=$(echo "$et 100.0" | awk '{printf "%.16f", $1 / $2}')
            maxv=$(min "$maxv" "1e-04")
            foamDictionary -entry deltaT -set "${initial}" system/controlDict
            foamDictionary -entry maxDeltaT -set "${maxv}" system/controlDict
            foamDictionary -entry maxChemicalTimeStep -set "${maxv}" constant/chemistryProperties

            # setup foam
            to_foam

            # run foam case
            runApplication -o $application
            # move file to results for plotting
            fname="validation/${pressure}_${temperature}_${phi}.foam"
            mv chemFoam.out $fname

            # set up the TestODE app
            to_testode
            fname="validation/${pressure}_${temperature}_${phi}.foamode"
            runApplication -o testODE
            mv chemFoam.out $fname

            # run sanity check
            runApplication -o python sanity_check.py --log=log.testODE \
                --temperature=$temperature --pressure=$pressure --phi=$phi

            # set accelerint & chemfoam
            to_chemfoam
            to_accelerint
            # run accel case
            runApplication -o $application
            # move file to results for plotting
            fname="validation/${pressure}_${temperature}_${phi}.accel"
            mv chemFoam.out $fname

                        # set up the TestODE app
            to_testode
            fname="validation/${pressure}_${temperature}_${phi}.accelode"
            runApplication -o testODE
            mv chemFoam.out $fname

            # run sanity check
            runApplication -o python sanity_check.py --log=log.testODE \
                --temperature=$temperature --pressure=$pressure --phi=$phi


            # and call python script to plot
            runApplication -o python validation/ct_plot.py --pressure=$pressure \
                --temperature=$temperature --phi=$phi --endtime=$et \
                --do_error_plot


            # and remove time so that we don't end up with the wrong state
            runApplication foamListTimes -rm

        done
    done
done

# finally run the error normer to get the final outout
runApplication -o python err_normer.py
# and move the log file to a nicer namer (that won't get cleaned?)
mv log.python results.log

#------------------------------------------------------------------------------
